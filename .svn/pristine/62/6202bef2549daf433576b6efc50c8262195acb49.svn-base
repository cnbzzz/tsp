package cn.spacewalker.tsp.bg.tbox.simulator.model;

import cn.spacewalker.tsp.bg.tbox.constant.ActionConstant;
import cn.spacewalker.tsp.bg.tbox.constant.VehConstant;
import cn.spacewalker.tsp.bg.tbox.simulator.message.UploadRealTimeMsg;
import cn.spacewalker.tsp.bg.tbox.simulator.message.VehSignInMsg;
import cn.spacewalker.tsp.bg.tbox.simulator.message.VehSignOutMsg;
import cn.spacewalker.tsp.bg.tbox.util.ProvPositionUtil;
import cn.spacewalker.tsp.bg.tbox.util.TimeFormatUtil;
import io.netty.channel.ChannelHandlerContext;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.Date;
import java.util.List;

/**
 * Created by steven ma
 * 2017/8/23 14:06
 */

public class Vehicle {

    private Logger log = LogManager.getLogger(this.getClass().getName());

    private String vin;
    private String iccid;
    private String gatherTime; //上报时间
    private ChannelHandlerContext ctx;

    //实时上报消息
    private UploadRealTimeMsg realTimeMsg;

    //车辆位置
    private ProvPosition vehPos;


    public Vehicle(String vin, String iccid, String gatherTime, ChannelHandlerContext ctx) {
        this.vin = vin;
        this.iccid = iccid;
        this.gatherTime = gatherTime;
        this.ctx = ctx;

        realTimeMsg = new UploadRealTimeMsg();
        //设置车辆初始位置
        vehPos = getPosRandom();
        realTimeMsg.setPosition(vehPos.getLng(), vehPos.getLat());
        //设置车辆初始总里程(1w公里以下的随机值)
        realTimeMsg.setAccMile((long)(Math.random() * 10000));

        realTimeMsg.setParam(vin, gatherTime);
    }


    //登入
    public void login() {

        VehSignInMsg signIn = new VehSignInMsg();
        signIn.setParam(vin, iccid, gatherTime);

        log.info("login:" +
                realTimeMsg.getGbtMsg().getVin());

        ctx.writeAndFlush(signIn.getGbtMsg());
    }

    //登出
    public void logout() {


        VehSignOutMsg signOut = new VehSignOutMsg();
        signOut.setParam(vin, gatherTime);

        log.info("logout:" +
                realTimeMsg.getGbtMsg().getVin());
        ctx.writeAndFlush(signOut.getGbtMsg());
    }

    //经度或纬度加上一个随机值，让其移动
    private String addPos(String lnglat) {
        long rlnglat = (long) (Math.random() * 1000);
        long llnglat = Long.parseLong(lnglat) + rlnglat;
        return Long.toString(llnglat);
    }

    //随机取得车辆启动位置
    private ProvPosition getPosRandom() {
        //全国经纬度
        List<ProvPosition> provs = ProvPositionUtil.readFile();

        int index = (int) (Math.random() * provs.size());

        ProvPosition pos = provs.get(index);

        pos.setLng(addPos(pos.getLng()));
        pos.setLat(addPos(pos.getLat()));

        log.info("pos: " + pos);

        return pos;
    }

    //车辆动作
    public void doAction(int action) {

        if (realTimeMsg == null) {
            realTimeMsg = new UploadRealTimeMsg();
        }

        realTimeMsg.setParam(vin, gatherTime);

        switch (action) {

            //启动
            case ActionConstant.START: {

                realTimeMsg.setNoCharge();
                realTimeMsg.setVehStatus(VehConstant.VEH_STATUS_START);

                log.info("START:" +
                        realTimeMsg.getGbtMsg().getVin());
                break;
            }

            //停车充电
            case ActionConstant.STOP_AND_CHARGE: {

                realTimeMsg.setStopAndCharge();
                log.info("STOP_AND_CHARGE:" +
                        realTimeMsg.getGbtMsg().getVin());
                break;
            }

            //充电停止
            case ActionConstant.CHARGE_DONE: {

                realTimeMsg.setDoneCharge();
                log.info("CHARGE_DONE:" +
                        realTimeMsg.getGbtMsg().getVin());
                break;
            }

            //移动
            case ActionConstant.MOVE: {

                vehPos.setLng(addPos(vehPos.getLng()));
                vehPos.setLat(addPos(vehPos.getLat()));

                //只要移动了就对里程数加个随机值
                realTimeMsg.addAccMile();
                realTimeMsg.setPosition(vehPos.getLng(), vehPos.getLat());

                log.info("MOVE:" +
                        realTimeMsg.getGbtMsg().getVin());
                break;
            }

            //熄火
            case ActionConstant.STOP: {

                realTimeMsg.setNoCharge();
                realTimeMsg.setVehStatus(VehConstant.VEH_STATUS_STOP);
                log.info("STOP: {} {}",
                        realTimeMsg.getGbtMsg().getVin());

                break;
            }

            default: {
                log.info("Error Action: " + action);
            }

        }


        //发送报文
        ctx.writeAndFlush(realTimeMsg.getGbtMsg());

    }


    //给时间加个秒数
    public void addTimeBySec(int inSec) {


        gatherTime = TimeFormatUtil.addTimeBySec(gatherTime, inSec);
//        //计算上报时间
//        String patterns = "yy MM dd HH mm ss";
//
//        try {
//            Date dTime = DateUtils.parseDate(gatherTime, patterns);
//            log.info("time:" + dTime);
//
//            dTime = DateUtils.addSeconds(dTime, inSec);
//            log.info("time:" + dTime);
//
//            gatherTime = TimeFormatUtil.tboxDate2Str(dTime);
//
//        } catch (ParseException e) {
//            e.printStackTrace();
//        }

    }

    @Override
    public String toString() {
        return "Vehicle{" +
                "vin='" + vin + '\'' +
                ", iccid='" + iccid + '\'' +
                ", gatherTime='" + gatherTime + '\'' +
                //", realTimeMsg=" + realTimeMsg +
                ", vehPos=" + vehPos +
                '}';
    }

    public void setGatherTime(String time) {
        //如果传过来的时候在本车时间之前不处理
        Date inTime = TimeFormatUtil.tboxStr2Date(time);
        Date myTime = TimeFormatUtil.tboxStr2Date(gatherTime);

        if(inTime.compareTo(myTime) < 0) {
            log.info("setGatherTime: {} => {}" , time, gatherTime);
            return;
        }

        this.gatherTime = time;
    }

    public String getGatherTime() {
        return gatherTime;
    }
}
